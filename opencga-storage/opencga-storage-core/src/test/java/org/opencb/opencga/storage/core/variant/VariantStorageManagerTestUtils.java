package org.opencb.opencga.storage.core.variant;

import org.junit.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Ignore;
import org.opencb.biodata.formats.io.FileFormatException;
import org.opencb.datastore.core.ObjectMap;
import org.opencb.opencga.storage.core.StorageManagerException;
import org.opencb.opencga.storage.core.StudyConfiguration;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;

/**
 * Created by jacobo on 31/05/15.
 */
@Ignore
public abstract class VariantStorageManagerTestUtils {


    public static final String VCF_TEST_FILE_NAME = "10k.chr22.phase3_shapeit2_mvncall_integrated_v5.20130502.genotypes.vcf.gz";
    public static final int NUM_VARIANTS = 9792;
    public static final int STUDY_ID = 5;
    public static final String STUDY_NAME = "1000g";
    public static final String DB_NAME = "opencga_variants_test";

    protected static URI inputUri;
    protected static URI outputUri;
    protected VariantStorageManager variantStorageManager;
    public static Logger logger;

    @BeforeClass
    public static void _beforeClass() throws Exception {
        System.setProperty(org.slf4j.impl.SimpleLogger.DEFAULT_LOG_LEVEL_KEY, "debug");
        Path rootDir = getTmpRootDir();
        Path inputPath = rootDir.resolve(VCF_TEST_FILE_NAME);
        Files.copy(VariantStorageManagerTest.class.getClassLoader().getResourceAsStream(VCF_TEST_FILE_NAME), inputPath, StandardCopyOption.REPLACE_EXISTING);
        inputUri = inputPath.toUri();
        outputUri = rootDir.toUri();
        logger = LoggerFactory.getLogger(VariantStorageManagerTest.class);
    }

    protected static Path getTmpRootDir() throws IOException {
        Path rootDir = Paths.get("tmp", "VariantStorageManagerTest");
        Files.createDirectories(rootDir);
        return rootDir;
    }

    @Before
    public void before() throws Exception {
        clearDB(DB_NAME);
    }

    @Before
    public final void _before() throws Exception {
        variantStorageManager = getVariantStorageManager();
    }

    protected abstract VariantStorageManager getVariantStorageManager() throws Exception;
    protected abstract void clearDB(String dbName) throws Exception;


    /* ---------------------------------------------------- */
    /* Static methods to run a simple ETL to index Variants */
    /* ---------------------------------------------------- */

    /**
     * Simple class to store the output URIs generated by the ETL
     */
    public static class ETLResult {

        public URI extractResult;
        public URI preTransformResult;
        public URI transformResult;
        public URI postTransformResult;
        public URI preLoadResult;
        public URI loadResult;
        //        public URI postLoadResult;
    }

    public static ETLResult runETL(VariantStorageManager variantStorageManager, ObjectMap options)
            throws IOException, FileFormatException, StorageManagerException {
        return runETL(variantStorageManager, options, true, true, true);
    }

    public static ETLResult runETL(VariantStorageManager variantStorageManager, ObjectMap options,
                                   boolean doExtract,
                                   boolean doTransform,
                                   boolean doLoad)
            throws IOException, FileFormatException, StorageManagerException {
        return runETL(variantStorageManager, inputUri, outputUri, options, options, options, options, options, options, options, doExtract, doTransform, doLoad);
    }

    public static ETLResult runDefaultETL(VariantStorageManager variantStorageManager, StudyConfiguration studyConfiguration)
            throws URISyntaxException, IOException, FileFormatException, StorageManagerException {
        return runDefaultETL(inputUri, variantStorageManager, studyConfiguration);
    }

    public static ETLResult runDefaultETL(URI inputUri, VariantStorageManager variantStorageManager, StudyConfiguration studyConfiguration)
            throws URISyntaxException, IOException, FileFormatException, StorageManagerException {

        ObjectMap extractParams = new ObjectMap();

        ObjectMap preTransformParams = new ObjectMap();
        preTransformParams.put(VariantStorageManager.STUDY_CONFIGURATION, studyConfiguration);
        preTransformParams.put(VariantStorageManager.FILE_ID, 6);

        ObjectMap transformParams = new ObjectMap();
        transformParams.put(VariantStorageManager.STUDY_CONFIGURATION, studyConfiguration);
        transformParams.put(VariantStorageManager.INCLUDE_GENOTYPES, true);
        transformParams.put(VariantStorageManager.FILE_ID, 6);
        ObjectMap postTransformParams = new ObjectMap();

        ObjectMap preLoadParams = new ObjectMap();
        preLoadParams.put(VariantStorageManager.STUDY_CONFIGURATION, studyConfiguration);
        ObjectMap loadParams = new ObjectMap();
        loadParams.put(VariantStorageManager.STUDY_CONFIGURATION, studyConfiguration);
        loadParams.put(VariantStorageManager.INCLUDE_GENOTYPES, true);
        loadParams.put(VariantStorageManager.FILE_ID, 6);
        loadParams.put(VariantStorageManager.DB_NAME, DB_NAME);
        ObjectMap postLoadParams = new ObjectMap();
        postLoadParams.put(VariantStorageManager.STUDY_CONFIGURATION, studyConfiguration);

        return runETL(variantStorageManager, inputUri, outputUri, extractParams, preTransformParams, transformParams, postTransformParams, preLoadParams, loadParams, postLoadParams, true, true, true);
    }

    public static ETLResult runETL(VariantStorageManager variantStorageManager, URI inputUri, URI outputUri,
                                   ObjectMap extractParams,
                                   ObjectMap preTransformParams, ObjectMap transformParams, ObjectMap postTransformParams,
                                   ObjectMap preLoadParams, ObjectMap loadParams, ObjectMap postLoadParams,
                                   boolean doExtract,
                                   boolean doTransform,
                                   boolean doLoad)
            throws IOException, FileFormatException, StorageManagerException {
        ETLResult etlResult = new ETLResult();

        if (doExtract) {
            variantStorageManager.getConfiguration().getStorageEngine(variantStorageManager.getStorageEngineId()).getVariant().setOptions(extractParams);
            inputUri = variantStorageManager.extract(inputUri, outputUri, null);
            etlResult.extractResult = inputUri;
        }

        if (doTransform) {
            variantStorageManager.getConfiguration().getStorageEngine(variantStorageManager.getStorageEngineId()).getVariant().setOptions(preTransformParams);
            inputUri = variantStorageManager.preTransform(inputUri, null);
            etlResult.preTransformResult = inputUri;
            Assert.assertTrue("Intermediary file " + inputUri + " does not exist", Paths.get(inputUri).toFile().exists());


            variantStorageManager.getConfiguration().getStorageEngine(variantStorageManager.getStorageEngineId()).getVariant().setOptions(transformParams);
            inputUri = variantStorageManager.transform(inputUri, null, outputUri, null);
            etlResult.transformResult = inputUri;
            Assert.assertTrue("Intermediary file " + inputUri + " does not exist", Paths.get(inputUri).toFile().exists());

            variantStorageManager.getConfiguration().getStorageEngine(variantStorageManager.getStorageEngineId()).getVariant().setOptions(postTransformParams);
            inputUri = variantStorageManager.postTransform(inputUri, null);
            etlResult.postTransformResult = inputUri;
            Assert.assertTrue("Intermediary file " + inputUri + " does not exist", Paths.get(inputUri).toFile().exists());
        }

        if (doLoad) {

            variantStorageManager.getConfiguration().getStorageEngine(variantStorageManager.getStorageEngineId()).getVariant().setOptions(preLoadParams);
            inputUri = variantStorageManager.preLoad(inputUri, outputUri, null);
            etlResult.preLoadResult = inputUri;
            Assert.assertTrue("Intermediary file " + inputUri + " does not exist", Paths.get(inputUri).toFile().exists());


            variantStorageManager.getConfiguration().getStorageEngine(variantStorageManager.getStorageEngineId()).getVariant().setOptions(loadParams);
            inputUri = variantStorageManager.load(inputUri, null);
            etlResult.loadResult = inputUri;
            Assert.assertTrue("Intermediary file " + inputUri + " does not exist", Paths.get(inputUri).toFile().exists());


            variantStorageManager.getConfiguration().getStorageEngine(variantStorageManager.getStorageEngineId()).getVariant().setOptions(postLoadParams);
            variantStorageManager.postLoad(inputUri, outputUri, null);
        }
        return etlResult;
    }

    protected static StudyConfiguration newStudyConfiguration() {
        return new StudyConfiguration(STUDY_ID, STUDY_NAME);
    }


}
